admit.prob
head(admit.prob)
admit.pred <- rep(1, 400)
admit.pred[admit.prob <0.5] <- 0
admit.pred
table(admit.pred, mydata$admit)
mean(admit.pred)
mean(admit.pred == mydata$admit)
newdata1 <- with(mydata, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
newdata1
newdata1.prob <- predict(admit.model, newdata = newdata1, type = "response")
newdata1.prob
newdata1
newdata1.prob
newdata1
newdata1$prob <- predict(admit.model, newdata = newdata1, type = "response")
newdata1
newdata1 <- with(mydata, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
newdata1$prob <- predict(admit.model, newdata = newdata1, type = "response")
newdata1
newdata1$pred <- rep(1,4)
newdata1
newdata1$pred[newdata1$prob < 0.5] = 0
newdata1
library(ISLR)
dataset <- Auto
Auto
length(Auto)
dim(Auto)
392/2
train <-(392, 196)
train <- sample(392, 196)
Auto.train <- Auto[, train]
Auto.train <- Auto[train, ]
dim(Auto.train)
Auto.test <- Auto[!train, ]
set.seed(100)
train <- sample(392, 196)
Auto.train <- Auto[train, ]
Auto.test <- Auto[!train, ]
Auto.model <- lm(mpg~horsepower, data = Auto.train)
print(Auto.model)
mean(Auto$mpg - predict(Auto.model)^2 )
mean(Auto$mpg - predict(Auto.model, Auto.test)^2 )
mean(Auto$mpg - predict(Auto.model, Auto.train)^2 )
mean(Auto$mpg - predict(Auto.model, Auto)^2 )
mean(Auto$mpg ~ predict(Auto.model, Auto)^2 )
mean(Auto$mpg - predict(Auto.model, Auto)^2 )
mean((Auto$mpg - predict(Auto.model, Auto))[!train]^2 )
mean((Auto$mpg-predict(Auto.model, Auto))[-train]^2)
mean((Auto$mpg - predict(Auto.model, Auto))[-train]^2 )
lm.fit <- lm(mpg~horsepower, data = Auto)
mean((Auto$mpg-predict(lm.fit, Auto))^2)
mean((Auto$mpg-predict(Auto.model, Auto))[-train]^2)
mean((Auto$mpg-predict(Auto.model, Auto))^2)
mean((Auto$mpg - predict(Auto.model, Auto))[-train]^2 )
Auto.model2 <- lm(mpg~poly(horsepower, 2), Auto.train)
Auto.model3 <- lm(mpg~poly(horsepower, 3), Auto.train)
error <- rep(1, 3)
error
error <- rep(1, 3)
error[1] <- mean((Auto$mpg - predict(Auto.model, Auto))[-train]^2 )
error[2] <- mean((Auto$mpg - predict(Auto.model2, Auto))[-train]^2 )
error[3] <- mean((Auto$mpg - predict(Auto.model3, Auto))[-train]^2 )
error
print (error)
plot(1, col =1, pch = ".", type = "l", xlab = "Degree of Polynomial", ylab = "MSE", main = "10 times random split", ylim = c(14,27), xlim = c (0, 12))
set.seed(35)
errorMatrix <- matrix(10, 10)
errorMatrix
plot(1, col =1, pch = ".", type = "l", xlab = "Degree of Polynomial", ylab = "MSE", main = "10 times random split", ylim = c(14,27), xlim = c (0, 12))
set.seed(35)
errorMatrix <- matrix(10, 10)
for (i in 1:10) {
train <- sample(392, 196)
for (j in 1:10) {
lm.fit.train <- lm(mpg~poly(horsepower, j), data = Auto, subset = train)
errorMatrix[i,j] <- mean((Auto$mpg-predict(lm.fit.train, Auto))[-train]^2)
}
lines(errorMatrix[i,], col = i)
}
plot(1, col =1, pch = ".", type = "l", xlab = "Degree of Polynomial", ylab = "MSE", main = "10 times random split", ylim = c(14,27), xlim = c (0, 12))
set.seed(35)
errorMatrix <- matrix(nrow = 10, ncol = 10)
for (i in 1:10) {
train <- sample(392, 196)
for (j in 1:10) {
lm.fit.train <- lm(mpg~poly(horsepower, j), data = Auto, subset = train)
errorMatrix[i,j] <- mean((Auto$mpg-predict(lm.fit.train, Auto))[-train]^2)
}
lines(errorMatrix[i,], col = i)
}
library(boot)
cv.err = rep(1:10)
for (i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), Auto)
cv.err[i] = cv.glm(Auto, glm.fit)
}
library(boot)
cv.err = rep(1:10)
for (i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), Auto, family = "binomial")
cv.err[i] = cv.glm(Auto, glm.fit)
}
library(boot)
cv.err = rep(1:10)
for (i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), Auto, family = "gaussian")
cv.err[i] = cv.glm(Auto, glm.fit)
}
library(boot)
cv.err = rep(0:10)
for (i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), Auto, family = "gaussian")
cv.err[i] = cv.glm(Auto, glm.fit)$delta[2]
}
cv.err
library(boot)
cv.err = rep(0,10)
for (i in 1:10) {
glm.fit = glm(mpg~poly(horsepower, i), Auto, family = "gaussian")
cv.err[i] = cv.glm(Auto, glm.fit)$delta[2]
}
plot(cv.err)
lines(cv.err)
plot(cv.err)
lines(cv.err)
plot(cv.err, ylim = c(15,28))
lines(cv.err)
df = USArrests
df.hc <- hclust(df, method = "complete")
df.hc <- hclust(dist(df), method = "complete")
df.hc
plot(df.hc)
df
cutree(df.hc, 3)
z = cutree(df.hc, 3)
plot(z)
z[1]
z[2]
z[4]
plot(df.hc)
plot(df.hc)
z = cutree(df.hc, 3)
z
z[1]
z[1][1]
z[1][2]
z[1]
z[1]$
1
z[1][1]
z[[1]]
z[[2]]
z[1][[2]]
z[1][[1]]
z[2][[1]]
z[3][[1]]
z[4][[1]]
z
z[2]
len(z)
length(z)
ct = cutree(df.hc, 3)
ct[1]
ct[4]
ct[2]
ct[4]
ct[[4]]
ct[[6]]
ct[[7]]
ct[7]
ct[7]
ct[7] == 3
ct[7] == 2
c1 = 0
c1 += ct[7]
c1 = c1 + ct[7]
c1
c1 = c1 + ct[9]
c1
c1 = []
c1 = list(0)
c1
c1 = list()
c1
c1
c1.append(ct[2])
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if ct == 1:
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct == 1) {
C1[i] = ct[i]
}
if (ct == 2) {
C2[i] = ct[i]
}
if (ct == 3) {
C3[i] = ct[i]
}
}
C1
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct == 1) {
C1[[i]] = ct[i]
}
if (ct == 2) {
C2[i] = ct[i]
}
if (ct == 3) {
C3[i] = ct[i]
}
}
C1
l = list()
l
l + (ct[1])
l + ct[1]
l + as.list(ct[1])
append(l, ct[1])
l
l = append(l, ct[1])
l
l = append(l, ct[ 4])
l
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct == 1) {
C1 = append(C1, ct[i])
}
if (ct == 2) {
C2 = append(C2, ct[i])
}
if (ct == 3) {
C3 = append(C3, ct[i])
}
}
C1
C1
C1 = append(C1, ct[5])
c1
C1
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct == 1) {
C1 = append(C1, ct[i])
}
if (ct == 2) {
C2 = append(C2, ct[i])
}
if (ct == 3) {
C3 = append(C3, ct[i])
}
}
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct == 1) {
C1 = append(C1, ct[[i]])
}
if (ct == 2) {
C2 = append(C2, ct[i])
}
if (ct == 3) {
C3 = append(C3, ct[i])
}
}
C1
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct == 1) {
C1 = append(C1, [ct[i]])
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct[i] == 1) {
C1 = append(C1, ct[i])
}
if (ct[i] == 2) {
C2 = append(C2, ct[i])
}
if (ct[i] == 3) {
C3 = append(C3, ct[i])
}
}
C1
C2
C3
ct[1]
ct[1] == 2
ct[1] == 1
C1 = append(C1, ct[1])
C1
ct[2] == 1
C1 = append(C1, ct[2])
C1
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in length(ct)) {
if (ct[i] == 1) {
C1 = append(C1, ct[i])
}
if (ct[i] == 2) {
C2 = append(C2, ct[i])
}
if (ct[i] == 3) {
C3 = append(C3, ct[i])
}
}
C1
C2
C2 = list()
C3 = list()
C1
C2
C3
length(ct)
for (i in length(ct)) {print (i)}
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in range(length(ct))) {
if (ct[i] == 1) {
C1 = append(C1, ct[i])
}
if (ct[i] == 2) {
C2 = append(C2, ct[i])
}
if (ct[i] == 3) {
C3 = append(C3, ct[i])
}
}
C1
C2
C3
for (i in range(length(ct))) {print (i)}
range(length(ct))
range(1, length(ct))
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in 1:(length(ct))) {
if (ct[i] == 1) {
C1 = append(C1, ct[i])
}
if (ct[i] == 2) {
C2 = append(C2, ct[i])
}
if (ct[i] == 3) {
C3 = append(C3, ct[i])
}
}
C1
C2
C1
C1[1]
for (i in C1) {print(i)}
names(C1)
print(names(C1))
ct = cutree(df.hc, 3)
C1 = list()
C2 = list()
C3 = list()
for (i in 1:(length(ct))) {
if (ct[i] == 1) {
C1 = append(C1, ct[i])
}
if (ct[i] == 2) {
C2 = append(C2, ct[i])
}
if (ct[i] == 3) {
C3 = append(C3, ct[i])
}
}
cat ("States in cluster 1 are: ", names(C1))
?names
df.hc <- hclust(dist(df), method = "complete")
plot(df.hc)
?cutree
df.hc.sc <- hclust(dist(scale(df)), method = "complete")
df.hc.sc <- hclust(dist(scale(df)), method = "complete")
plot(df.hc.sc)
df.hc.sc <- hclust(dist(scale(df)), method = "complete")
plot(df.hc.sc)
df.hc.sc <- hclust(dist(scale(df)), method = "complete")
plot(df.hc.sc)
df.hc.sc <- hclust(dist(scale(df)), method = "complete")
plot(df.hc.sc)
abline(ct)
nrow(df)
ct = cutree(df.hc, 3)
al = (df.hc$height[47] + HC$height[43]) / 2
ct = cutree(df.hc, 3)
al = (df.hc$height[47] + df.hc$height[43]) / 2
plot(df.hc)
abline(al)
al
ct = cutree(df.hc, 3)
al = (df.hc$height[47] + df.hc$height[43]) / 2
plot(df.hc)
abline(al)
ct = cutree(df.hc, 3)
al = (df.hc$height[47] + df.hc$height[43]) / 2
plot(df.hc, hang = -1)
C1 = list()
C2 = list()
C3 = list()
for (i in 1:(length(ct))) {
if (ct[i] == 1) {
C1 = append(C1, ct[i])
}
if (ct[i] == 2) {
C2 = append(C2, ct[i])
}
if (ct[i] == 3) {
C3 = append(C3, ct[i])
}
}
cat ("States in cluster 1 are: ", names(C1))
cat ("States in cluster 2 are: ", names(C2))
cat ("States in cluster 3 are: ", names(C3))
ct = cutree(df.hc, 3)
al = (df.hc$height[47] + df.hc$height[43]) / 2
plot(df.hc, hang = -1)
abline(80)
plot(df.hc, hang = -1)
abline(80, 2)
plot(df.hc, hang = -1)
abline(al, 0, col= "red")
ct
table(ct)
plot(df.hc, hang = -1)
abline(ct, 0, col= "red")
plot(df.hc, hang = -1)
abline(80, 0, col= "red")
summary(ct)
library(dendextend)
install.packages("dendextend")
dend <- as.dendrogram(hclust(dist(df)))
dend1 <- color_branches(dend, k = 3)
library(dendextend)
dend1 <- color_branches(dend, k = 3)
dend <- as.dendrogram(hclust(dist(df)))
dend1 <- color_branches(dend, k = 3)
dend2 <- color_labels(dend, k = 3)
plot(dend1)
plot(dend1)
plot(dend1)
plot(dend)
?color_labels
dend <- as.dendrogram(hclust(dist(df)))
dend <- color_branches(dend, k = 3)
dend <- color_labels(dend, k = 3)
plot(dend2)
abline(120, 0, col= "red", lty = 2)
View(df)
mushrooms <- read.csv("Sample-Data-Mushroom-Classification.csv")
mushrooms
summary(mushrooms)
str(mushrooms)
na(mushrooms)
mushrooms
is.na(mushrooms)
sum(is.na(mushrooms))
sum(is.na(mushrooms[1]))
sum(is.na(mushrooms[2]))
sum(is.na(mushrooms[3]))
(is.na(mushrooms[3]))
(is.na(mushrooms[4]))
(is.na(mushrooms[5]))
mushrooms <- read.csv("Sample-Data-Mushroom-Classification.csv")
str(mushrooms)
summary(mushrooms)
z = read.table("agaricus-lepiota.data")
z
data = read.csv("data.csv")
View(data)
str(data)
install.packages("installr")
library(installr)
installr::check.for.updates.R()
installr::install.R()
installr::check.for.updates.R()
